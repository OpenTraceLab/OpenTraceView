name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "otv/**"
      - "meson.build"
      - "meson_options.txt"
      - ".github/workflows/**"
  push:
    branches: [main]
    tags: ['v*']
    paths:
      - "otv/**"
      - "meson.build"
      - "meson_options.txt"
      - ".github/workflows/**"
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-14]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.ref }}
          fetch-depth: 0

      - name: Show build context
        if: github.event_name == 'pull_request'
        run: |
          echo "Building PR #${{ github.event.pull_request.number }}"
          echo "Base: ${{ github.base_ref }}"
          echo "Head: ${{ github.head_ref }}"
          echo "Merge commit: ${{ github.event.pull_request.merge_commit_sha }}"
          git --no-pager log -1 --oneline

      - name: Get latest OpenTraceCapture release
        id: otc-release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: 'OpenTraceLab',
              repo: 'OpenTraceCapture'
            });
            // Sort by created_at descending to get most recent
            const sortedReleases = releases.data.sort((a, b) => 
              new Date(b.created_at) - new Date(a.created_at)
            );
            const latestTag = sortedReleases[0].tag_name;
            core.setOutput('tag', latestTag);
            core.info(`Using OpenTraceCapture ${latestTag}`);

      - name: Get latest OpenTraceDecode release
        id: otd-release
        uses: actions/github-script@v7
        with:
          script: |
            const releases = await github.rest.repos.listReleases({
              owner: 'OpenTraceLab',
              repo: 'OpenTraceDecode'
            });
            // Sort by created_at descending to get most recent
            const sortedReleases = releases.data.sort((a, b) => 
              new Date(b.created_at) - new Date(a.created_at)
            );
            const latestTag = sortedReleases[0].tag_name;
            core.setOutput('tag', latestTag);
            core.info(`Using OpenTraceDecode ${latestTag}`);

      # Linux cache
      - name: Cache (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cache/ccache
            $HOME/.cache/meson
          key: linux-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: linux-

      # macOS cache
      - name: Cache (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cache/ccache
            $HOME/.cache/meson
          key: mac-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: mac-

      # Windows cache
      - name: Cache (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            C:\Users\runneradmin\.ccache
            C:\Users\runneradmin\AppData\Local\meson
          key: win-${{ hashFiles('**/meson.build','**/meson_options.txt') }}
          restore-keys: win-

      - name: Linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build pkg-config gcc g++ ccache python3-pip \
            libglib2.0-dev libglibmm-2.4-dev libusb-1.0-0-dev libzip-dev libftdi1-dev \
            libserialport-dev libhidapi-dev libieee1284-3-dev \
            qt6-base-dev qt6-base-dev-tools libqt6svg6-dev qt6-tools-dev \
            libgl-dev libglu1-mesa-dev \
            libboost-serialization-dev libboost-system-dev libboost-stacktrace-dev \
            doxygen
          pip3 install --user meson
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          echo "/usr/lib/ccache" >> "$GITHUB_PATH"
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> "$GITHUB_ENV"
          mkdir -p "$HOME/.cache/ccache" "$HOME/.cache/meson"

      - name: Install OpenTraceCapture (Linux)
        if: runner.os == 'Linux'
        run: |
          wget https://github.com/OpenTraceLab/OpenTraceCapture/releases/download/${{ steps.otc-release.outputs.tag }}/opentracecapture-linux.tar.gz
          sudo tar xzf opentracecapture-linux.tar.gz -C /usr/local
          sudo ldconfig

      - name: Install OpenTraceDecode (Linux)
        if: runner.os == 'Linux'
        run: |
          wget https://github.com/OpenTraceLab/OpenTraceDecode/releases/download/${{ steps.otd-release.outputs.tag }}/opentracedecode-linux.tar.gz
          sudo tar xzf opentracedecode-linux.tar.gz -C /usr/local
          sudo ldconfig

      - name: macOS deps
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install meson ninja pkg-config ccache glib glibmm libusb libzip libftdi \
            hidapi libserialport qt6 boost doxygen
          echo "$(brew --prefix ccache)/libexec" >> "$GITHUB_PATH"
          echo "XDG_CACHE_HOME=$HOME/.cache"   >> "$GITHUB_ENV"
          echo "CCACHE_DIR=$HOME/.cache/ccache" >> "$GITHUB_ENV"
          mkdir -p "$HOME/.cache/ccache" "$HOME/.cache/meson"

      - name: Install OpenTraceCapture (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "Downloading from: https://github.com/OpenTraceLab/OpenTraceCapture/releases/download/${{ steps.otc-release.outputs.tag }}/opentracecapture-macos.tar.gz"
          wget https://github.com/OpenTraceLab/OpenTraceCapture/releases/download/${{ steps.otc-release.outputs.tag }}/opentracecapture-macos.tar.gz
          ls -lh opentracecapture-macos.tar.gz
          BREW_PREFIX=$(brew --prefix)
          echo "Extracting to: $BREW_PREFIX"
          sudo tar xzf opentracecapture-macos.tar.gz -C $BREW_PREFIX
          echo "Checking for .pc file:"
          find $BREW_PREFIX -name "opentracecapture.pc" -ls

      - name: Install OpenTraceDecode (macOS)
        if: runner.os == 'macOS'
        run: |
          wget -q https://github.com/OpenTraceLab/OpenTraceDecode/releases/download/${{ steps.otd-release.outputs.tag }}/opentracedecode-macos.tar.gz
          BREW_PREFIX=$(brew --prefix)
          sudo tar xzf opentracedecode-macos.tar.gz -C $BREW_PREFIX

      - name: MSYS2 setup
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-meson
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-ccache
            mingw-w64-x86_64-pkg-config
            mingw-w64-x86_64-glib2
            mingw-w64-x86_64-glibmm
            mingw-w64-x86_64-libusb
            mingw-w64-x86_64-libzip
            mingw-w64-x86_64-libftdi
            mingw-w64-x86_64-libserialport
            mingw-w64-x86_64-hidapi
            mingw-w64-x86_64-qt6
            mingw-w64-x86_64-boost
            mingw-w64-x86_64-doxygen

      - name: Install OpenTraceCapture (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          wget -q https://github.com/OpenTraceLab/OpenTraceCapture/releases/download/${{ steps.otc-release.outputs.tag }}/opentracecapture-windows.tar.gz
          tar xzf opentracecapture-windows.tar.gz -C /mingw64

      - name: Install OpenTraceDecode (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          wget -q https://github.com/OpenTraceLab/OpenTraceDecode/releases/download/${{ steps.otd-release.outputs.tag }}/opentracedecode-windows.tar.gz
          tar xzf opentracedecode-windows.tar.gz -C /mingw64

      - name: Build & test (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            PREFIX=/usr/local
          else
            PREFIX=/usr
          fi
          meson setup build --buildtype=release --prefix=$PREFIX
          meson configure build
          meson compile -C build
          meson test -C build --print-errorlogs
          DESTDIR="${PWD}/install" meson install -C build
          tar czf opentraceview-${{ runner.os == 'macOS' && 'macos' || 'linux' }}.tar.gz -C install$PREFIX .

      - name: Build & test (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          export CCACHE_DIR=/c/Users/runneradmin/.ccache
          export XDG_CACHE_HOME=/c/Users/runneradmin/AppData/Local
          mkdir -p "$CCACHE_DIR"
          meson setup build --buildtype=release --prefix=/mingw64
          meson configure build
          meson compile -C build
          meson test -C build --print-errorlogs
          DESTDIR="${PWD}/install" meson install -C build
          MINGW_PATH=$(find install -type d -name mingw64 | head -1)
          tar czf opentraceview-windows.tar.gz -C $MINGW_PATH .

      - name: Upload artifact
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: opentraceview-${{ runner.os == 'macOS' && 'macos' || runner.os == 'Windows' && 'windows' || 'linux' }}
          path: opentraceview-*.tar.gz

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}
          path: |
            build/meson-logs
            build/meson-private
          if-no-files-found: ignore

  pr-summary:
    needs: build
    if: always() && github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Download failure logs
        if: needs.build.result == 'failure'
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: Create PR summary
        run: |
          if [ "${{ needs.build.result }}" = "failure" ]; then
            echo "## ❌ Build/Test Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "One or more platform builds failed. Check the job logs above for details." >> $GITHUB_STEP_SUMMARY
            find artifacts -type f -name 'testlog.txt' -print -exec echo "### {}" \; -exec tail -n 100 {} \; >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
          else
            echo "## ✅ All Checks Passed" >> $GITHUB_STEP_SUMMARY
          fi

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/opentraceview-*.tar.gz
          draft: false
          prerelease: true
